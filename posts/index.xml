<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Lucia&#39;s blog</title>
    <link>https://LuciaKot.github.io/posts/</link>
    <description>Recent content in Posts on Lucia&#39;s blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 13 Mar 2025 17:11:37 +0800</lastBuildDate>
    <atom:link href="https://LuciaKot.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cs106B</title>
      <link>https://LuciaKot.github.io/posts/cs106b/</link>
      <pubDate>Thu, 13 Mar 2025 17:11:37 +0800</pubDate>
      <guid>https://LuciaKot.github.io/posts/cs106b/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;lecture0c的历史和哲学&#34;&gt;Lecture0：C++的历史和哲学&lt;/h2&gt;
&lt;h3 id=&#34;c的发展历史&#34;&gt;C++的发展历史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;汇编：unportable、hardtowrite&lt;/li&gt;
&lt;li&gt;C：no classes&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Cs106L</title>
      <link>https://LuciaKot.github.io/posts/cs106l/</link>
      <pubDate>Thu, 13 Mar 2025 17:11:37 +0800</pubDate>
      <guid>https://LuciaKot.github.io/posts/cs106l/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;font style=&#34;color:#DF2A3F;&#34;&gt;注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;lecture0c的历史和哲学&#34;&gt;Lecture0：C++的历史和哲学&lt;/h2&gt;
&lt;h3 id=&#34;c的发展历史&#34;&gt;C++的发展历史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;汇编：unportable、hardtowrite&lt;/li&gt;
&lt;li&gt;C：no classes&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#define macroname(parameter) body	&lt;/span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//写下macros
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8ec07c;font-style:italic&#34;&gt;&amp;#34;filename.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#undef macroname
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;---&lt;/span&gt; filename.h &lt;span style=&#34;color:#fe8019&#34;&gt;---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在filename.h中定义引用的内容，这些内容和macroname匹配，被替换
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#define PRINTOUT(n) cout &amp;lt;&amp;lt; #n &amp;lt;&amp;lt;&amp;#34;has value &amp;#34; &amp;lt;&amp;lt; (n) &amp;lt;&amp;lt; endl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;137&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PRINTOUT(x &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;42&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;-----&lt;/span&gt; after preprocessing &lt;span style=&#34;color:#fe8019&#34;&gt;------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;137&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;x * 42&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;has value &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (x &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;42&lt;/span&gt;) &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#define DECLARE_MY_VAR(type) type my_##type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DECLARE_MY_VAR(&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;-----&lt;/span&gt; after preprocessing &lt;span style=&#34;color:#fe8019&#34;&gt;------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; my_int;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;struct&lt;/span&gt; DFA {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; transitions;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; acceptingStates;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; startState;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* 接收一个DFA和string，判断string是否可以被接受*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;SimulateDFA&lt;/span&gt;(DFA&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;amp;&lt;/span&gt; d, string input) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; currState &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; d.startState;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt;(string&lt;span style=&#34;color:#fe8019&#34;&gt;::&lt;/span&gt;iterator itr &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; input.begin(); itr &lt;span style=&#34;color:#fe8019&#34;&gt;!=&lt;/span&gt; input.end(); &lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt;itr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            currState &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; d.transitions[make_pair(currState, &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt;itr)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//string是否结束于accepting state
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; d.acceptingStates.find(currState) &lt;span style=&#34;color:#fe8019&#34;&gt;!=&lt;/span&gt; d.acceptingStates.end();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; myVector; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;back_insert_iterator&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt; vector&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; itr(myVector);&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt;i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt;itr &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; i; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// &amp;#34;Write&amp;#34; to the back_insert_iterator, appending the value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt;itr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;copy(myVector.begin(), myVector.end(), ostream_iterator&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt;(cout, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)); 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; original &lt;span style=&#34;color:#fe8019&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* ... */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; destination;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reverse_copy(original.begin(), original.end(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             back_insert_iterator&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt; vector&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;&lt;/span&gt;(destination));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//可以简写为back_inserter(destination)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
