[{"content":"注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。\nLecture0：C++的历史和哲学 C++的发展历史 汇编：unportable、hardtowrite C：no classes C++ ","permalink":"https://LuciaKot.github.io/posts/cs106b/","summary":"\u003cp\u003e\u003cstrong\u003e\u003cfont style=\"color:#DF2A3F;\"\u003e注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。\u003c/font\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"lecture0c的历史和哲学\"\u003eLecture0：C++的历史和哲学\u003c/h2\u003e\n\u003ch3 id=\"c的发展历史\"\u003eC++的发展历史\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e汇编：unportable、hardtowrite\u003c/li\u003e\n\u003cli\u003eC：no classes\u003c/li\u003e\n\u003cli\u003eC++\u003c/li\u003e\n\u003c/ul\u003e","title":"Cs106B"},{"content":"注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。\nLecture0：C++的历史和哲学 C++的发展历史 汇编：unportable、hardtowrite C：no classes C++ #define macroname(parameter) body\t//写下macros #include \u0026#34;filename.h\u0026#34; #undef macroname --- filename.h --- 在filename.h中定义引用的内容，这些内容和macroname匹配，被替换 #define PRINTOUT(n) cout \u0026lt;\u0026lt; #n \u0026lt;\u0026lt;\u0026#34;has value \u0026#34; \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl int x = 137; PRINTOUT(x * 42); ----- after preprocessing ------ int x = 137; cout \u0026lt;\u0026lt; \u0026#34;x * 42\u0026#34; \u0026lt;\u0026lt;\u0026#34;has value \u0026#34; \u0026lt;\u0026lt; (x * 42) \u0026lt;\u0026lt; endl; #define DECLARE_MY_VAR(type) type my_##type DECLARE_MY_VAR(int); ----- after preprocessing ------ int my_int; struct DFA { map\u0026lt;pair\u0026lt;int, char\u0026gt;, int\u0026gt; transitions; set\u0026lt;int\u0026gt; acceptingStates; int startState; }; /* 接收一个DFA和string，判断string是否可以被接受*/ bool SimulateDFA(DFA\u0026amp; d, string input) { int currState = d.startState; for(string::iterator itr = input.begin(); itr != input.end(); ++itr) currState = d.transitions[make_pair(currState, *itr)]; //string是否结束于accepting state return d.acceptingStates.find(currState) != d.acceptingStates.end(); } vector\u0026lt;int\u0026gt; myVector; back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt; itr(myVector);//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写 for (int i = 0; i \u0026lt; 10; ++i) { *itr = i; // \u0026#34;Write\u0026#34; to the back_insert_iterator, appending the value. ++itr; } /* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */ copy(myVector.begin(), myVector.end(), ostream_iterator\u0026lt;int\u0026gt;(cout, \u0026#34; \u0026#34;)); vector\u0026lt;int\u0026gt; original = /* ... */ vector\u0026lt;int\u0026gt; destination; reverse_copy(original.begin(), original.end(), back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt;(destination)); //可以简写为back_inserter(destination) ","permalink":"https://LuciaKot.github.io/posts/cs106l/","summary":"\u003cp\u003e\u003cstrong\u003e\u003cfont style=\"color:#DF2A3F;\"\u003e注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。\u003c/font\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"lecture0c的历史和哲学\"\u003eLecture0：C++的历史和哲学\u003c/h2\u003e\n\u003ch3 id=\"c的发展历史\"\u003eC++的发展历史\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e汇编：unportable、hardtowrite\u003c/li\u003e\n\u003cli\u003eC：no classes\u003c/li\u003e\n\u003cli\u003eC++\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e#define macroname(parameter) body\t\u003c/span\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e//写下macros\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#8ec07c\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#8ec07c;font-style:italic\"\u003e\u0026#34;filename.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#8ec07c\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e#undef macroname\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fe8019\"\u003e---\u003c/span\u003e filename.h \u003cspan style=\"color:#fe8019\"\u003e---\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e在filename.h中定义引用的内容，这些内容和macroname匹配，被替换\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e#define PRINTOUT(n) cout \u0026lt;\u0026lt; #n \u0026lt;\u0026lt;\u0026#34;has value \u0026#34; \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d3869b\"\u003e137\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePRINTOUT(x \u003cspan style=\"color:#fe8019\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#d3869b\"\u003e42\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fe8019\"\u003e-----\u003c/span\u003e after preprocessing \u003cspan style=\"color:#fe8019\"\u003e------\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d3869b\"\u003e137\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecout \u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#b8bb26\"\u003e\u0026#34;x * 42\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#b8bb26\"\u003e\u0026#34;has value \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (x \u003cspan style=\"color:#fe8019\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#d3869b\"\u003e42\u003c/span\u003e) \u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e#define DECLARE_MY_VAR(type) type my_##type\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#8ec07c\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDECLARE_MY_VAR(\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fe8019\"\u003e-----\u003c/span\u003e after preprocessing \u003cspan style=\"color:#fe8019\"\u003e------\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e my_int;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fe8019\"\u003estruct\u003c/span\u003e DFA {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    map\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003epair\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#fabd2f\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e, \u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e transitions;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    set\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e acceptingStates;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e startState;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e/* 接收一个DFA和string，判断string是否可以被接受*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fabd2f\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#fabd2f\"\u003eSimulateDFA\u003c/span\u003e(DFA\u003cspan style=\"color:#fe8019\"\u003e\u0026amp;\u003c/span\u003e d, string input) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e currState \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e d.startState;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#fe8019\"\u003efor\u003c/span\u003e(string\u003cspan style=\"color:#fe8019\"\u003e::\u003c/span\u003eiterator itr \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e input.begin(); itr \u003cspan style=\"color:#fe8019\"\u003e!=\u003c/span\u003e input.end(); \u003cspan style=\"color:#fe8019\"\u003e++\u003c/span\u003eitr)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            currState \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e d.transitions[make_pair(currState, \u003cspan style=\"color:#fe8019\"\u003e*\u003c/span\u003eitr)];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#928374;font-style:italic\"\u003e//string是否结束于accepting state\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#fe8019\"\u003ereturn\u003c/span\u003e d.acceptingStates.find(currState) \u003cspan style=\"color:#fe8019\"\u003e!=\u003c/span\u003e d.acceptingStates.end();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e myVector; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eback_insert_iterator\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e vector\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e itr(myVector);\u003cspan style=\"color:#928374;font-style:italic\"\u003e//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d3869b\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#d3869b\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#fe8019\"\u003e++\u003c/span\u003ei) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#fe8019\"\u003e*\u003c/span\u003eitr \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e i; \u003cspan style=\"color:#928374;font-style:italic\"\u003e// \u0026#34;Write\u0026#34; to the back_insert_iterator, appending the value.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#fe8019\"\u003e++\u003c/span\u003eitr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e/* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecopy(myVector.begin(), myVector.end(), ostream_iterator\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e(cout, \u003cspan style=\"color:#b8bb26\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e)); \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e original \u003cspan style=\"color:#fe8019\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#928374;font-style:italic\"\u003e/* ... */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e destination;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ereverse_copy(original.begin(), original.end(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             back_insert_iterator\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e vector\u003cspan style=\"color:#fe8019\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#fabd2f\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#fe8019\"\u003e\u0026gt;\u003c/span\u003e(destination));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#928374;font-style:italic\"\u003e//可以简写为back_inserter(destination)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Cs106L"}]