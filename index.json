[{"content":"","date":"2025-03-13","externalUrl":null,"permalink":"/tags/%23%E7%BC%96%E7%A8%8B/","section":"Tags","summary":"","title":"#编程","type":"tags"},{"content":"","date":"2025-03-13","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。\nLecture0：C++的历史和哲学 # C++的发展历史 # 汇编：unportable、hardtowrite C：no classes C++ ","date":"2025-03-13","externalUrl":null,"permalink":"/posts/cs106b/","section":"Posts","summary":"","title":"Cs106B","type":"posts"},{"content":"注意：习题都还没做，等到看完视频之后来做，并且更新一下八股文文档。\nLecture0：C++的历史和哲学 # C++的发展历史 # 汇编：unportable、hardtowrite C：no classes C++ #define macroname(parameter) body\t//写下macros #include \u0026#34;filename.h\u0026#34; #undef macroname --- filename.h --- 在filename.h中定义引用的内容，这些内容和macroname匹配，被替换 #define PRINTOUT(n) cout \u0026lt;\u0026lt; #n \u0026lt;\u0026lt;\u0026#34;has value \u0026#34; \u0026lt;\u0026lt; (n) \u0026lt;\u0026lt; endl int x = 137; PRINTOUT(x * 42); ----- after preprocessing ------ int x = 137; cout \u0026lt;\u0026lt; \u0026#34;x * 42\u0026#34; \u0026lt;\u0026lt;\u0026#34;has value \u0026#34; \u0026lt;\u0026lt; (x * 42) \u0026lt;\u0026lt; endl; #define DECLARE_MY_VAR(type) type my_##type DECLARE_MY_VAR(int); ----- after preprocessing ------ int my_int; struct DFA { map\u0026lt;pair\u0026lt;int, char\u0026gt;, int\u0026gt; transitions; set\u0026lt;int\u0026gt; acceptingStates; int startState; }; /* 接收一个DFA和string，判断string是否可以被接受*/ bool SimulateDFA(DFA\u0026amp; d, string input) { int currState = d.startState; for(string::iterator itr = input.begin(); itr != input.end(); ++itr) currState = d.transitions[make_pair(currState, *itr)]; //string是否结束于accepting state return d.acceptingStates.find(currState) != d.acceptingStates.end(); } vector\u0026lt;int\u0026gt; myVector; back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt; itr(myVector);//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写 for (int i = 0; i \u0026lt; 10; ++i) { *itr = i; // \u0026#34;Write\u0026#34; to the back_insert_iterator, appending the value. ++itr; } /* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */ copy(myVector.begin(), myVector.end(), ostream_iterator\u0026lt;int\u0026gt;(cout, \u0026#34; \u0026#34;)); back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt; itr(myVector);//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写 for (int i = 0; i \u0026lt; 10; ++i) { *itr = i; // \u0026#34;Write\u0026#34; to the back_insert_iterator, appending the value. ++itr; } /* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */ copy(myVector.begin(), myVector.end(), ostream_iterator\u0026lt;int\u0026gt;(cout, \u0026#34; \u0026#34;)); back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt; itr(myVector);//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写 for (int i = 0; i \u0026lt; 10; ++i) { *itr = i; // \u0026#34;Write\u0026#34; to the back_insert_iterator, appending the value. ++itr; } /* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */ copy(myVector.begin(), myVector.end(), ostream_iterator\u0026lt;int\u0026gt;(cout, \u0026#34; \u0026#34;)); back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt; itr(myVector);//主要看（）里的内容就行，类型是根据写入位置来确定的，可以简写 for (int i = 0; i \u0026lt; 10; ++i) { *itr = i; // \u0026#34;Write\u0026#34; to the back_insert_iterator, appending the value. ++itr; } /* Print the vector contents; this displays 0 1 2 3 4 5 6 7 8 9 */ copy(myVector.begin(), myVector.end(), ostream_iterator\u0026lt;int\u0026gt;(cout, \u0026#34; \u0026#34;)); vector\u0026lt;int\u0026gt; original = /* ... */ vector\u0026lt;int\u0026gt; destination; reverse_copy(original.begin(), original.end(), back_insert_iterator\u0026lt; vector\u0026lt;int\u0026gt; \u0026gt;(destination)); //可以简写为back_inserter(destination) ","date":"2025-03-13","externalUrl":null,"permalink":"/posts/cs106l/","section":"Posts","summary":"","title":"Cs106L","type":"posts"},{"content":"","date":"2025-03-13","externalUrl":null,"permalink":"/","section":"Lucia","summary":"","title":"Lucia","type":"page"},{"content":"","date":"2025-03-13","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-03-13","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-03-13","externalUrl":null,"permalink":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/","section":"Categories","summary":"","title":"计算机","type":"categories"},{"content":"","date":"2023-08-14","externalUrl":null,"permalink":"/tags/%23space/","section":"Tags","summary":"","title":"#Space","type":"tags"},{"content":" A sub-title # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nibh nisl, vulputate eu lacus vitae, maximus molestie libero. Vestibulum laoreet, odio et sollicitudin sollicitudin, quam ligula tempus urna, sed sagittis eros eros ac felis. In tristique tortor vitae lacinia commodo. Mauris venenatis ultrices purus nec fermentum. Nunc sit amet aliquet metus. Morbi nisl felis, gravida ac consequat vitae, blandit eu libero. Curabitur porta est in dui elementum porttitor. Maecenas fermentum, tortor ac feugiat fringilla, orci sem sagittis massa, a congue risus ipsum vel massa. Aliquam sit amet nunc vulputate, facilisis neque in, faucibus nisl.\n","date":"2023-08-14","externalUrl":null,"permalink":"/posts/my-first-post/","section":"Posts","summary":"This is my first post on my site","title":"My first post","type":"posts"},{"content":"","externalUrl":null,"permalink":"/archives/","section":"Lucia","summary":"archives","title":"Archive","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/search/","section":"Lucia","summary":"search","title":"搜索","type":"page"}]