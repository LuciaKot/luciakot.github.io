[{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/categories/tech-%E6%8A%80%E5%A4%9A%E4%B8%8D%E5%8E%8B%E8%BA%AB/","section":"Categories","summary":"","title":"\u003cTech\u003e 技多不压身","type":"categories"},{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" 警惕买椟还珠 # 如果你搜索Hugo博客，你会发现一个有意思的现象：建站装修博主真的非常多。\n装修确实是会上瘾的，本人亲测Hugo建站没费多少功夫，但装修上三天两头修修补补，不知不觉就浑浑噩噩输出寥寥地过了一个月，实在汗颜。\n怎么创建一个博客MVP（minimum viable product） # 这篇文章整理一下我踩了巨多坑，回归理智状态后，总结的优先级最高的博客功能（个人倾向）。\n如果我当时照做，应该会有一个更丝滑的开始：\n首先说明，选择一个符合你需求的Hugo模板会事半功倍（否则，后期设置会很心累）：\n建议选择使用人数较多的，因为Hugo建站中会有很多需要通过搜索解决的问题，而与你使用相同模板的博客文章是最直接有效的资源。\n其他需要考虑的需求包括：目录、评论、tag、搜索、代码等支持、主题是否在维护中等。\n目测中文博客里，Papermod和stack主题使用人数较多。\nP.S. 博客主题仓库里的example site会是很好的参考资源。\ngoogle收录：\n小白（比如我）可能会以为只要我写了博文并po出来，就能在谷歌上搜索到了，但其实这是天大的误会……\n对于透明小站，谷歌并不一定会即时收录，也就不要提能搜索到啦。\n设置方式参考：Hugo网站如何加入Google Search Console\n文章tag/分类和搜索：\n通过社交媒体和搜索引擎搜索是主要的博客流量来源，而用户通常也会在发现一篇文章有用时想要探索你的其他文章。\n拥有清晰的文章tag和分类+拥有好用的搜索能力会让用户体验更好。\n数据统计：\n如果你不只是为了有一个电子日记本，而是也希望在这个过程中获得反馈并迭代改进，你一定需要对你的博客的浏览/用户数据有所了解。\n可以使用google analytics/Umami等方式进行后台数据统计。\n我目前使用的是google analytics，一个需要注意的坑点是记得排除本地环境调试时的浏览数据，否则数据会失真。设置方式参考：Hugo网站如何加入Google Analytics\n评论功能：\n对于博主本人来说，比起冷冰冰的数据，活人感更强的评论能更加激起创作热情；\n而我作为用户时，也会希望有评论区可以了解其他用户对文章质量的评价，也希望能够有渠道来对作者进行反馈。\n所以，不管是从哪个角色的角度出发，评论功能都是很必需的。\n目测目前主流的评论区方案包括：twikoo、waline、giscus（不建议非技术博客使用强制要求github账号的giscus方案）。\n我个人使用的是twikoo方案，官方教程就很清晰好上手。\n其他的博客功能 # 有一个快速的丝滑的开始，有利于避免本末倒置。\n不过博客作为我们的赛博小窝，也确实值得我们在过程中添砖加瓦。\n收集一些我认为可以陆续增加的博客功能：\n图床：我使用的是cloudflare R2+piclist方案。设置方式参考：从零开始搭建你的免费图床系统和转移到 cloudflare R2 + PicList 作图床\n自定义字体：中文网字计划是很好的资源。设置方式参考：给博客更换字体\nRSS\n设置域名：我使用的是namecheap购买域名+cloudflare CDN功能\n先这样吧，想到再补充。\n","date":"2025-04-13","externalUrl":null,"permalink":"/posts/hugo-priority-setting/","section":"Posts","summary":"如果你搜索Hugo博客，你会发现一个有意思的现象：建站装修博主真的非常多。整理一下我踩了巨多坑，回归理智状态后，总结的优先级最高的博客功能。从这里开始，有利于避免本末倒置，让博客的本质回归到内容上来。","title":"Hugo建站满月纪念：我认为优先级最高的博客功能","type":"posts"},{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/","section":"Lucia's Log","summary":"","title":"Lucia's Log","type":"page"},{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-04-13","externalUrl":null,"permalink":"/tags/tips/","section":"Tags","summary":"","title":"Tips","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/categories/growth-%E4%BA%BA%E5%BE%80%E9%AB%98%E5%A4%84%E8%B5%B0/","section":"Categories","summary":"","title":"\u003cGrowth\u003e 人往高处走","type":"categories"},{"content":" 第一次使用与弃用 # 2020年第一次在ali abdaal的视频里接触到了Notion，neat的外形+独树一帜的数据库设计让我垂直入坑：热血沸腾学习各种教程，连建3个workspace决心all in one。\n当时我的决策好像是两极化的，要么就是all in one，要么就是quit，就像一些失败的爱情，我炽热地上头，草率地下头。\n不知不觉重新拾起Notion已经是3年后的现在。\n重新种草 # 这次让我重新启用Notion的种草源头是Jeff Su。 Jeff作为职场方向的生产力博主，推荐的使用方法更适合现在的我（以及大部分普通用户，除非你是销售Notion模板的博主）：\n我并不想把学习/设置Notion作为主线，而是希望Notion服务于我的主线。\n这次我怎么用Notion？ # 重新使用下来也有个把月了，目前磨合地还算舒服，自觉已经成为了一个更成熟的Notion用户了：\n让Notion服务于我的需求。\n包括：\n不执着于打造fancy的第二大脑，而是按照需要、阶段性设置。\n不奢求all in one，而是取各家之长： Notion整理结构性数据，如知识库； 写文档就用语雀，毕竟打开速度更快大幅减少friction，功能聚焦，文档写作支持更强（百思不得其解为何Notion不支持simple table内的bullet points），更可结合语雀小记，配合插件使用很愉快。\n重要的数据库turn into database page，并集中在同一个页面下管理，防止误删除，这些相当于后端。实际使用的是数据库的view，放在你需要用到的dashboard里，这是前端。\n不奢求一个数据库统管全局，也不盲目开数据库。 数据库集中方便管理，免得吃灰。 不过也有项目制的情况，字段特殊，不适合沿用集中的数据库。 目前采用的逻辑类似于git分支管理： 长期使用的数据库类似于main分支，存放对长期有价值的数据。 项目制使用的数据库类似于feature分支，存放短期内需要追踪的数据，需要存档时复制或移动到长期使用的数据库中，相当于merge。（建议使用复制而不是移动，由此可以存档项目制文档中的记录）\n不知道这次是否会继续坚持，但我已不再执着于此， 只要能为我的主线生活起到帮助，那就好了。\n","date":"2025-04-11","externalUrl":null,"permalink":"/posts/tops-tips-for-notion/","section":"Posts","summary":"弃用三年后，重新拾起Notion。这次我决定：我并不想把学习/设置Notion作为主线，而是希望Notion服务于我的主线。","title":"3年后重启Notion，我好像变成更成熟的用户了","type":"posts"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/notion/","section":"Tags","summary":"","title":"Notion","type":"tags"},{"content":"","date":"2025-04-11","externalUrl":null,"permalink":"/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/","section":"Tags","summary":"","title":"生产力","type":"tags"},{"content":"","date":"2025-03-05","externalUrl":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI","type":"tags"},{"content":"","date":"2025-03-05","externalUrl":null,"permalink":"/tags/coding/","section":"Tags","summary":"","title":"Coding","type":"tags"},{"content":" 说说我为什么想学Cursor？ # 我很受用Naval的一句话，他说：\u0026ldquo;Learn to sell, learn to build. Learn both and you will be unstoppable.\u0026rdquo;\n光是想象我能为世界上的一群人创造价值，传递价值，并换取个人自由，我都兴奋地快要像小飞象一样飘在空中。\n我对成为一个“创造者”是极度渴求的。但作为非科班选手，虽然有着落地自己的软件产品的执念，也总是在很长时间内被难度劝退。\n本来只是好奇Cursor这类code with AI的工具，试用后发现确实在为开发者提供丝滑体验的同时，也为零基础者提供一个友好的build-your-own-X起点。\n虽然工具尚不完美，但我的想象力的边界又可以扩展开了。\n为什么写这篇入门指南？ # 今年根据我的观察，AI确实在某种程度上实现了“技术平权”——越来越多的独立产品出现，越来越多没有技术背景的人入场。 虽然不免混杂，但这不就是那些蓬勃发展的行业的前期形态吗？\n但也是这种时候，容易被各种噪声影响。就像曾经的《21天学通C++》一样，现在也充斥着《5分钟开发一个iOS应用》的教程，但很多其实噱头大于实质，上手后的落差感反而哄抬了焦虑氛围，让小白没有勇气入局。\n作为曾经转码上过岸的人，我实在太懂那种四面环顾迷茫难行的感觉，好想好想写一篇真的有用的专业教程，无奈个人实力有限，所以只能先写写小白入门教程（附带踩坑经验）。以Cheat Sheet的形式，随时供翻阅。\n图片版本方便保存，文字版本方便阅读，供君选择。\nTL;DR(Cheat sheet图片) # 😀 适用人群 Who is it for # 程序员：提升开发效率和开发体验 学生：通过提问，学习不熟悉的代码 产品/售前/销售：输入需求生成演示原型，提升沟通效率 一人企业：独立产出MVP投入市场，快速验证想法 任何人：通过对话创建工具，实现消费者\u0026gt;生产者的转变 🖥️ 常见使用场景 Common Use Cases # Prompt建议：明确Task,给出Example(可上传图片），活用@能力获取更准确的回复，step-by-step开发\n基于上下文自动补全代码 通过对话开发新功能（支持上传截图） 学习理解不熟悉代码 代码重构或修复代码 基于指令生成终端命令 💪🏻 快速入门 Quick Start # 简介 快捷键 代码编辑区中，Cursor会自动给出代码建议并展现预览，使用Tab接受建议，可实现：智能重写/多行修改/代码补全/跳转到智能推荐的下一编辑位置 Tab 在Composer、Chat和Prompt Bar中，可以输入@来引用特定上下文，以获得更准确的回复（eg.@Files后仅显示该类别中最相关的建议） @ 最轻便简单的指令功能Prompt Bar，基于指令生成，且每次生成之后，可以添加后续指令来进一步优化 （1）在代码编辑区打开时，支持快速提问/根据指令生成代码/修改已选中代码 （2）在Terminal区打开时，支持描述所需的操作生成对应命令 Ctrl/⌘ + K 打开Chat功能，支持进行多轮聊天，适用于提问代码问题/修复bug Ctrl/⌘ + L 打开Composer侧边栏，支持聊天/编辑，适用于新功能开发，模型上一般建议选择claude Ctrl/⌘ + I ⚠️ 避坑指南 Pro Tips # Cursor不完美，使用中也会出错。务必养成良好的代码管理习惯，改动后git勤提交 尽量拆分成小功能任务减少出错，step-by-step地交给Composer，碰到错误修改时可用Composer中的Revert回退到正常时的代码状态 使用@为模型提供精确的上下文，常用的包括：@Web用于同步网络上最新的信息，@Docs用于附加文档链接获取更合理的代码建议，@Codebase提高代码库搜索的准确性 设置rules引导 AI，使模型的生成更符合标准和风格偏好，维持代码一致性 ","date":"2025-03-05","externalUrl":null,"permalink":"/posts/cursor-cheatsheet-for-beginners/","section":"Posts","summary":"一篇不太喧哗的Curso入门教程。当技术开始平权，我们也许都能变成创造者了。","title":"Cursor Cheat Sheet：准备好变成创造者了吗?","type":"posts"},{"content":"","date":"2025-03-05","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"","externalUrl":null,"permalink":"/archives/","section":"Lucia's Log","summary":"archives","title":"Archive","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/explore/","section":"Lucia's Log","summary":"","title":"Categories \u0026 Tags","type":"page"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]